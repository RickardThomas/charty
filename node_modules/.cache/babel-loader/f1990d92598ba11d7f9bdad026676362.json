{"ast":null,"code":"import _slicedToArray from \"/Users/tom/Desktop/random-component/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tom/Desktop/random-component/src/Components/GetCoordinates.jsx\";\nimport React from 'react';\nimport { useReducer } from 'react'; // optimization. \n// would be good to have orders and another action like add stuff to list separately\n\nexport default function GetCoordinates() {\n  const reducer = (state, action) => {\n    switch (action.type) {\n      case \"COORDS\":\n        return [state, action.payload];\n\n      case \"HEIGHTWIDTH\":\n        return [state, action.payload];\n\n      default:\n        return state;\n    }\n  };\n\n  const _useReducer = useReducer(reducer, 0),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        coords = _useReducer2[0],\n        dispatch1 = _useReducer2[1];\n\n  const _useReducer3 = useReducer(reducer, 0),\n        _useReducer4 = _slicedToArray(_useReducer3, 2),\n        xAndYs = _useReducer4[0],\n        dispatch2 = _useReducer4[1];\n\n  const showCoords = () => {\n    let x = window.event.clientX;\n    let y = window.event.clientY;\n    const coord = {\n      x,\n      y\n    };\n    dispatch1({\n      type: \"COORDS\",\n      payload: coord\n    });\n  };\n\n  window.onresize = () => {\n    let height = window.innerHeight;\n    let width = window.innerWidth;\n    const xAndY = {\n      width,\n      height\n    };\n    dispatch2({\n      type: \"HEIGHTWIDTH\",\n      payload: xAndY\n    });\n  };\n\n  console.log(xAndYs);\n  return React.createElement(\"div\", {\n    onMouseMove: showCoords,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    style: {\n      display: 'flex'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"))}\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \" touch here\"), React.createElement(\"ul\", {\n    style: {\n      display: 'flex',\n      flexWrap: 'no'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, coords.reverse().map(({\n    x,\n    y\n  }, i) => React.createElement(\"li\", {\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \" X \", x, \" and Y \", y, \" \"))));\n}","map":{"version":3,"sources":["/Users/tom/Desktop/random-component/src/Components/GetCoordinates.jsx"],"names":["React","useReducer","GetCoordinates","reducer","state","action","type","payload","coords","dispatch1","xAndYs","dispatch2","showCoords","x","window","event","clientX","y","clientY","coord","onresize","height","innerHeight","width","innerWidth","xAndY","console","log","display","flexWrap","reverse","map","i"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA0B,OAA1B,C,CAEA;AACA;;AAEE,eAAe,SAASC,cAAT,GAA2B;AAExC,QAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/B,YAAQA,MAAM,CAACC,IAAf;AACE,WAAK,QAAL;AACE,eAAO,CAACF,KAAD,EAAQC,MAAM,CAACE,OAAf,CAAP;;AACF,WAAK,aAAL;AACM,eAAO,CAACH,KAAD,EAAQC,MAAM,CAACE,OAAf,CAAP;;AACN;AACE,eAAOH,KAAP;AANJ;AAQD,GATH;;AAFwC,sBAaZH,UAAU,CAACE,OAAD,EAAU,CAAV,CAbE;AAAA;AAAA,QAajCK,MAbiC;AAAA,QAazBC,SAbyB;;AAAA,uBAcZR,UAAU,CAACE,OAAD,EAAU,CAAV,CAdE;AAAA;AAAA,QAcjCO,MAdiC;AAAA,QAczBC,SAdyB;;AAgBxC,QAAMC,UAAU,GAAG,MAAO;AAEtB,QAAIC,CAAC,GAAGC,MAAM,CAACC,KAAP,CAAaC,OAArB;AACA,QAAIC,CAAC,GAAGH,MAAM,CAACC,KAAP,CAAaG,OAArB;AACA,UAAMC,KAAK,GAAG;AAAEN,MAAAA,CAAF;AAAMI,MAAAA;AAAN,KAAd;AACAR,IAAAA,SAAS,CAAC;AAAEH,MAAAA,IAAI,EAAE,QAAR;AAAkBC,MAAAA,OAAO,EAAEY;AAA3B,KAAD,CAAT;AACH,GAND;;AAQAL,EAAAA,MAAM,CAACM,QAAP,GAAkB,MAAO;AAErB,QAAIC,MAAM,GAAGP,MAAM,CAACQ,WAApB;AACA,QAAIC,KAAK,GAAGT,MAAM,CAACU,UAAnB;AACA,UAAMC,KAAK,GAAG;AAAEF,MAAAA,KAAF;AAASF,MAAAA;AAAT,KAAd;AACAV,IAAAA,SAAS,CAAC;AAAEL,MAAAA,IAAI,EAAE,aAAR;AAAuBC,MAAAA,OAAO,EAAEkB;AAAhC,KAAD,CAAT;AACH,GAND;;AAQAC,EAAAA,OAAO,CAACC,GAAR,CAAYjB,MAAZ;AAEA,SAEI;AAAK,IAAA,WAAW,EAAEE,UAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE;AAAI,IAAA,KAAK,EAAE;AAAEgB,MAAAA,OAAO,EAAE;AAAX,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAFF,EASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBATA,EAWA;AAAI,IAAA,KAAK,EAAE;AAAEA,MAAAA,OAAO,EAAE,MAAX;AAAmBC,MAAAA,QAAQ,EAAE;AAA7B,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCrB,MAAM,CAACsB,OAAP,GAAiBC,GAAjB,CAAqB,CAAC;AAAElB,IAAAA,CAAF;AAAKI,IAAAA;AAAL,GAAD,EAAWe,CAAX,KACjB;AAAI,IAAA,GAAG,EAAEA,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAkBnB,CAAlB,aAA8BI,CAA9B,MADJ,CADD,CAXA,CAFJ;AAqBD","sourcesContent":["import React from 'react';\nimport { useReducer} from 'react';\n\n// optimization. \n// would be good to have orders and another action like add stuff to list separately\n\n  export default function GetCoordinates () {\n\n    const reducer = (state, action) => {\n        switch (action.type) {\n          case \"COORDS\":\n            return [state, action.payload];\n          case \"HEIGHTWIDTH\":\n                return [state, action.payload];\n          default:\n            return state;\n        }\n      }\n \n    const [coords, dispatch1] = useReducer(reducer, 0);\n    const [xAndYs, dispatch2] = useReducer(reducer, 0);\n\n    const showCoords = () =>  {\n\n        let x = window.event.clientX\n        let y = window.event.clientY\n        const coord = { x , y}\n        dispatch1({ type: \"COORDS\", payload: coord})\n    }\n\n    window.onresize = () =>  {\n\n        let height = window.innerHeight\n        let width = window.innerWidth\n        const xAndY = { width, height}\n        dispatch2({ type: \"HEIGHTWIDTH\", payload: xAndY})\n    }\n\n    console.log(xAndYs)\n\n    return (\n    \n        <div onMouseMove={showCoords}>\n\n          <ul style={{ display: 'flex' }}>\n\n        {/* {xAndYs.reverse().map(({  width , height }, i) => ( \n             <li key={i} > my { width } and Y { height } </li> */}\n        ))}\n        </ul>\n\n        <p> touch here</p>\n\n        <ul style={{ display: 'flex', flexWrap: 'no' }}>\n        {coords.reverse().map(({ x, y }, i) => ( \n             <li key={i} > X { x } and Y { y } </li>\n        ))}\n        </ul>\n\n        </div>\n    )\n  }\n\n\n\n"]},"metadata":{},"sourceType":"module"}