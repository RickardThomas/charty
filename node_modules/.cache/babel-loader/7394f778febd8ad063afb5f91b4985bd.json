{"ast":null,"code":"import _slicedToArray from \"/Users/tom/Desktop/random-component/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tom/Desktop/random-component/src/Components/GetCoordinates.jsx\";\nimport React from 'react';\nimport { useReducer } from 'react';\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"increment\":\n      return [...state, action.payload];\n\n    case \"decrement\":\n      return [...state, action.payload];\n\n    default:\n      return state;\n  }\n};\n\nexport default function GetCoordinates() {\n  const _useReducer = useReducer(reducer, 1),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        count = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  const handleIncrement = () => {\n    let count = count + 1;\n    dispatch({\n      type: \"increment\",\n      payload: count\n    });\n  };\n\n  const handleDecrement = () => {\n    let count = count - 1;\n    dispatch({\n      type: \"decrement\",\n      payload: count\n    });\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, count, React.createElement(\"button\", {\n    onClick: handleIncrement,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"+1\"), React.createElement(\"button\", {\n    onClick: handleDecrement,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"-1\"));\n} // import React from 'react';\n// import { useState } from 'react';\n// function reducer(state, action) {\n//     switch (action.type) {\n//       case \"UPDATE_XY\":\n//         return [...state, action.payload];\n//       default:\n//         return state;\n//     }\n//   }\n// export default function GetCoordinates() {\n//     const[width, setWidth] = useState(window.innerWidth);\n//     const[height, setHeight] = useState(window.innerHeight);\n//     const[x, setX] = useState(window.clientX);\n//     const[y, setY] = useState(window.clientY);\n//     window.onresize = () => {\n//         setHeight(window.innerHeight)\n//         setWidth(window.innerWidth)\n//     }\n//     const showCoords = () => {\n//         setX(window.event.clientX)\n//         setY(window.event.clientY)\n//     }\n//     return (\n//     <div onMouseMove={showCoords}>\n//     <h2> coordinates for X =   { x } coordinates for Y : { y } of mouse</h2>\n//     <h2> Total area of window in px {width * height}</h2>\n//     <h2> Width: {width} </h2>\n//     <h2> Height:  {height} </h2>\n//     </div>\n//     )\n// }","map":{"version":3,"sources":["/Users/tom/Desktop/random-component/src/Components/GetCoordinates.jsx"],"names":["React","useReducer","reducer","state","action","type","payload","GetCoordinates","count","dispatch","handleIncrement","handleDecrement"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA0B,OAA1B;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/B,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACE,aAAO,CAAC,GAAGF,KAAJ,EAAWC,MAAM,CAACE,OAAlB,CAAP;;AAEA,SAAK,WAAL;AACI,aAAO,CAAC,GAAGH,KAAJ,EAAWC,MAAM,CAACE,OAAlB,CAAP;;AACN;AACE,aAAOH,KAAP;AAPJ;AASD,CAVH;;AAYE,eAAe,SAASI,cAAT,GAA2B;AAAA,sBAEdN,UAAU,CAACC,OAAD,EAAU,CAAV,CAFI;AAAA;AAAA,QAEjCM,KAFiC;AAAA,QAE1BC,QAF0B;;AAIxC,QAAMC,eAAe,GAAG,MAAO;AAC3B,QAAIF,KAAK,GAAGA,KAAK,GAAG,CAApB;AACAC,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAE,WAAR;AAAqBC,MAAAA,OAAO,EAAEE;AAA9B,KAAD,CAAR;AACH,GAHD;;AAKA,QAAMG,eAAe,GAAG,MAAO;AAC3B,QAAIH,KAAK,GAAGA,KAAK,GAAG,CAApB;AACAC,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAE,WAAR;AAAqBC,MAAAA,OAAO,EAAEE;AAA9B,KAAD,CAAR;AACH,GAHD;;AAKA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,KADH,EAEE;AAAQ,IAAA,OAAO,EAAEE,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,EAGE;AAAQ,IAAA,OAAO,EAAEC,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHF,CADJ;AAOD,C,CAGH;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["import React from 'react';\nimport { useReducer} from 'react';\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n      case \"increment\":\n        return [...state, action.payload];\n\n        case \"decrement\":\n            return [...state, action.payload];\n      default:\n        return state;\n    }\n  }\n\n  export default function GetCoordinates () {\n\n    const [count, dispatch] = useReducer(reducer, 1);\n\n    const handleIncrement = () =>  {\n        let count = count + 1\n        dispatch({ type: \"increment\", payload: count})\n    }\n\n    const handleDecrement = () =>  {\n        let count = count - 1\n        dispatch({ type: \"decrement\", payload: count})\n    }\n\n    return (\n        <div>\n          {count}\n          <button onClick={handleIncrement}>+1</button>\n          <button onClick={handleDecrement}>-1</button>\n        </div>\n    )\n  }\n\n\n// import React from 'react';\n// import { useState } from 'react';\n\n// function reducer(state, action) {\n//     switch (action.type) {\n//       case \"UPDATE_XY\":\n//         return [...state, action.payload];\n//       default:\n//         return state;\n//     }\n//   }\n\n// export default function GetCoordinates() {\n\n//     const[width, setWidth] = useState(window.innerWidth);\n//     const[height, setHeight] = useState(window.innerHeight);\n\n//     const[x, setX] = useState(window.clientX);\n//     const[y, setY] = useState(window.clientY);\n    \n//     window.onresize = () => {\n//         setHeight(window.innerHeight)\n//         setWidth(window.innerWidth)\n//     }\n \n//     const showCoords = () => {\n//         setX(window.event.clientX)\n//         setY(window.event.clientY)\n//     }\n\n//     return (\n//     <div onMouseMove={showCoords}>\n//     <h2> coordinates for X =   { x } coordinates for Y : { y } of mouse</h2>\n//     <h2> Total area of window in px {width * height}</h2>\n//     <h2> Width: {width} </h2>\n//     <h2> Height:  {height} </h2>\n\n//     </div>\n//     )\n// }"]},"metadata":{},"sourceType":"module"}