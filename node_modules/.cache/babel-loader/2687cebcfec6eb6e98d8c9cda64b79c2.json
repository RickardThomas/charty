{"ast":null,"code":"import _slicedToArray from \"/Users/tom/Desktop/random-component/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tom/Desktop/random-component/src/Components/GetCoordinates.jsx\";\nimport React from 'react';\nimport { useReducer } from 'react';\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"COORDS\":\n      return [...state, action.payload];\n\n    case \"HEIGHTWIDTH\":\n      return [...state, action.payload];\n\n    default:\n      return state;\n  }\n};\n\nexport default function GetCoordinates() {\n  // const [coords, xAndYs, dispatch] = useReducer(reducer, []);\n  const _useReducer = useReducer(reducer, []),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        xAndYs = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  const showCoords = () => {\n    let x = window.event.clientX;\n    let y = window.event.clientY;\n    const coord = {\n      x,\n      y\n    };\n    dispatch({\n      type: \"COORDS\",\n      payload: coord\n    });\n  };\n\n  window.onresize = () => {\n    let height = window.innerHeight;\n    let width = window.innerwidth;\n    const xAndY = {\n      width,\n      height\n    };\n    dispatch({\n      type: \"HEIGHTWIDTH\",\n      payload: xAndY\n    });\n  };\n\n  return React.createElement(\"div\", {\n    onMouseMove: showCoords,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \" touch\"), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, coords.map(({\n    x,\n    y\n  }, i) => React.createElement(\"li\", {\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \" X \", x, \" and Y \", y, \" \"))), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, xAndYs.map(({\n    width,\n    height\n  }, i) => React.createElement(\"li\", {\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \" X \", width, \" and Y \", height, \" \"))), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }));\n} // import React from 'react';\n// import { useState } from 'react';\n// function reducer(state, action) {\n//     switch (action.type) {\n//       case \"UPDATE_XY\":\n//         return [...state, action.payload];\n//       default:\n//         return state;\n//     }\n//   }\n// export default function GetCoordinates() {\n//     const[width, setWidth] = useState(window.innerWidth);\n//     const[height, setHeight] = useState(window.innerHeight);\n//     const[x, setX] = useState(window.clientX);\n//     const[y, setY] = useState(window.clientY);\n//     window.onresize = () => {\n//         setHeight(window.innerHeight)\n//         setWidth(window.innerWidth)\n//     }\n//     const showCoords = () => {\n//         setX(window.event.clientX)\n//         setY(window.event.clientY)\n//     }\n//     return (\n//     <div onMouseMove={showCoords}>\n//     <h2> coordinates for X =   { x } coordinates for Y : { y } of mouse</h2>\n//     <h2> Total area of window in px {width * height}</h2>\n//     <h2> Width: {width} </h2>\n//     <h2> Height:  {height} </h2>\n//     </div>\n//     )\n// }","map":{"version":3,"sources":["/Users/tom/Desktop/random-component/src/Components/GetCoordinates.jsx"],"names":["React","useReducer","reducer","state","action","type","payload","GetCoordinates","xAndYs","dispatch","showCoords","x","window","event","clientX","y","clientY","coord","onresize","height","innerHeight","width","innerwidth","xAndY","coords","map","i"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA0B,OAA1B;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/B,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,QAAL;AACE,aAAO,CAAC,GAAGF,KAAJ,EAAWC,MAAM,CAACE,OAAlB,CAAP;;AAEA,SAAK,aAAL;AACI,aAAO,CAAC,GAAGH,KAAJ,EAAWC,MAAM,CAACE,OAAlB,CAAP;;AACN;AACE,aAAOH,KAAP;AAPJ;AASD,CAVH;;AAYE,eAAe,SAASI,cAAT,GAA2B;AAExC;AAFwC,sBAIbN,UAAU,CAACC,OAAD,EAAU,EAAV,CAJG;AAAA;AAAA,QAIjCM,MAJiC;AAAA,QAIzBC,QAJyB;;AAOxC,QAAMC,UAAU,GAAG,MAAO;AAEtB,QAAIC,CAAC,GAAGC,MAAM,CAACC,KAAP,CAAaC,OAArB;AACA,QAAIC,CAAC,GAAGH,MAAM,CAACC,KAAP,CAAaG,OAArB;AAEA,UAAMC,KAAK,GAAG;AAAEN,MAAAA,CAAF;AAAMI,MAAAA;AAAN,KAAd;AAEAN,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAE,QAAR;AAAkBC,MAAAA,OAAO,EAAEW;AAA3B,KAAD,CAAR;AACH,GARD;;AAUAL,EAAAA,MAAM,CAACM,QAAP,GAAkB,MAAO;AAErB,QAAIC,MAAM,GAAGP,MAAM,CAACQ,WAApB;AACA,QAAIC,KAAK,GAAGT,MAAM,CAACU,UAAnB;AAEA,UAAMC,KAAK,GAAG;AAAEF,MAAAA,KAAF;AAAUF,MAAAA;AAAV,KAAd;AAEAV,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAE,aAAR;AAAuBC,MAAAA,OAAO,EAAEiB;AAAhC,KAAD,CAAR;AACH,GARD;;AAYA,SACI;AAAK,IAAA,WAAW,EAAEb,UAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCc,MAAM,CAACC,GAAP,CAAW,CAAC;AAAGd,IAAAA,CAAH;AAAMI,IAAAA;AAAN,GAAD,EAAYW,CAAZ,KACP;AAAI,IAAA,GAAG,EAAEA,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAkBf,CAAlB,aAA8BI,CAA9B,MADJ,CADD,CAFA,EAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCP,MAAM,CAACiB,GAAP,CAAW,CAAC;AAAGJ,IAAAA,KAAH;AAAWF,IAAAA;AAAX,GAAD,EAAsBO,CAAtB,KACP;AAAI,IAAA,GAAG,EAAEA,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAkBL,KAAlB,aAAmCF,MAAnC,MADJ,CADD,CARA,EAaC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbD,CADJ;AAoBD,C,CAGH;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["import React from 'react';\nimport { useReducer} from 'react';\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n      case \"COORDS\":\n        return [...state, action.payload];\n\n        case \"HEIGHTWIDTH\":\n            return [...state, action.payload];\n      default:\n        return state;\n    }\n  }\n\n  export default function GetCoordinates () {\n\n    // const [coords, xAndYs, dispatch] = useReducer(reducer, []);\n\n    const [xAndYs, dispatch] = useReducer(reducer, []);\n\n\n    const showCoords = () =>  {\n\n        let x = window.event.clientX\n        let y = window.event.clientY\n\n        const coord = { x , y}\n        \n        dispatch({ type: \"COORDS\", payload: coord})\n    }\n\n    window.onresize = () =>  {\n\n        let height = window.innerHeight\n        let width = window.innerwidth\n        \n        const xAndY = { width , height}\n\n        dispatch({ type: \"HEIGHTWIDTH\", payload: xAndY})\n    }\n\n\n\n    return (\n        <div onMouseMove={showCoords}>\n            <p> touch</p>\n        <ul>\n        {coords.map(({  x, y }, i) => ( \n             <li key={i} > X { x } and Y { y } </li>\n        ))}\n        </ul>\n\n        <ul>\n        {xAndYs.map(({  width , height }, i) => ( \n             <li key={i} > X { width  } and Y { height } </li>\n        ))}\n        </ul>\n         <p></p>\n          {/* <button onClick={handleIncrement}>+1</button>\n          <button onClick={handleDecrement}>-1</button>\n          {count} */}\n        </div>\n    )\n  }\n\n\n// import React from 'react';\n// import { useState } from 'react';\n\n// function reducer(state, action) {\n//     switch (action.type) {\n//       case \"UPDATE_XY\":\n//         return [...state, action.payload];\n//       default:\n//         return state;\n//     }\n//   }\n\n// export default function GetCoordinates() {\n\n//     const[width, setWidth] = useState(window.innerWidth);\n//     const[height, setHeight] = useState(window.innerHeight);\n\n//     const[x, setX] = useState(window.clientX);\n//     const[y, setY] = useState(window.clientY);\n    \n//     window.onresize = () => {\n//         setHeight(window.innerHeight)\n//         setWidth(window.innerWidth)\n//     }\n \n//     const showCoords = () => {\n//         setX(window.event.clientX)\n//         setY(window.event.clientY)\n//     }\n\n//     return (\n//     <div onMouseMove={showCoords}>\n//     <h2> coordinates for X =   { x } coordinates for Y : { y } of mouse</h2>\n//     <h2> Total area of window in px {width * height}</h2>\n//     <h2> Width: {width} </h2>\n//     <h2> Height:  {height} </h2>\n\n//     </div>\n//     )\n// }"]},"metadata":{},"sourceType":"module"}