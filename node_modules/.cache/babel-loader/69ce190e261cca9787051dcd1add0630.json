{"ast":null,"code":"import _slicedToArray from \"/Users/tom/Desktop/random-component/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tom/Desktop/random-component/src/Components/GetCoordinates.jsx\";\nimport React from 'react';\nimport { useReducer } from 'react'; // optimization. \n// would be good to have orders and another action like add stuff to list separately\n\nexport default function GetCoordinates() {\n  const reducer = (state, action) => {\n    switch (action.type) {\n      case \"COORDS\":\n        return [...state, action.payload];\n\n      case \"HEIGHTWIDTH\":\n        return [...state, action.payload];\n\n      case \"CHANGE\":\n        return [...state, action.payload];\n\n      default:\n        return state;\n    }\n  };\n\n  const _useReducer = useReducer(reducer, []),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        coords = _useReducer2[0],\n        dispatch1 = _useReducer2[1];\n\n  const _useReducer3 = useReducer(reducer, []),\n        _useReducer4 = _slicedToArray(_useReducer3, 2),\n        xAndYs = _useReducer4[0],\n        dispatch2 = _useReducer4[1];\n\n  const _useReducer5 = useReducer(reducer, []),\n        _useReducer6 = _slicedToArray(_useReducer5, 2),\n        change = _useReducer6[0],\n        dispatch3 = _useReducer6[1];\n\n  const showCoords = () => {\n    let x = window.event.clientX;\n    let y = window.event.clientY;\n    const coord = {\n      x,\n      y\n    };\n    dispatch1({\n      type: \"COORDS\",\n      payload: coord\n    });\n  };\n\n  window.onresize = () => {\n    let height = window.innerHeight;\n    let width = window.innerWidth;\n    const xAndY = {\n      width,\n      height\n    };\n    dispatch2({\n      type: \"HEIGHTWIDTH\",\n      payload: xAndY\n    });\n  };\n\n  const changeSize = () => {\n    let clientWidth = 400;\n    let clientHeight = 500;\n    let change = {\n      clientWidth,\n      clientHeight\n    };\n    dispatch3({\n      type: \"CHANGE\",\n      payload: change\n    });\n  };\n\n  return React.createElement(\"div\", {\n    onMouseMove: showCoords,\n    style: {\n      display: 'flex',\n      alignItems: 'flex-start'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column-reverse',\n      alignItems: 'flex-start'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, xAndYs.reverse().map(({\n    width,\n    height\n  }, i) => React.createElement(\"li\", {\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \" no \", i, \" and  my \", width, \" and Y \", height, \" \"))), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \" touch here\"), \" \", React.createElement(\"button\", {\n    onClick: changeSize,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \" change size\"), React.createElement(\"ul\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column-reverse',\n      alignItems: 'flex-end'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, coords.reverse().map(({\n    x,\n    y\n  }, i) => React.createElement(\"li\", {\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \" \", i, \" the  X \", x, \" and Y \", y, \" \"))));\n}","map":{"version":3,"sources":["/Users/tom/Desktop/random-component/src/Components/GetCoordinates.jsx"],"names":["React","useReducer","GetCoordinates","reducer","state","action","type","payload","coords","dispatch1","xAndYs","dispatch2","change","dispatch3","showCoords","x","window","event","clientX","y","clientY","coord","onresize","height","innerHeight","width","innerWidth","xAndY","changeSize","clientWidth","clientHeight","display","alignItems","flexDirection","reverse","map","i"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useReducer} from 'react';\n\n// optimization. \n// would be good to have orders and another action like add stuff to list separately\n\n  export default function GetCoordinates () {\n\n    const reducer = (state, action) => {\n        switch (action.type) {\n          case \"COORDS\":\n            return [...state, action.payload];\n          case \"HEIGHTWIDTH\":\n                return [...state, action.payload];\n                case \"CHANGE\":\n                  return [...state, action.payload];\n          default:\n            return state;\n        }\n      }\n \n    const [coords, dispatch1] = useReducer(reducer, []);\n    const [xAndYs, dispatch2] = useReducer(reducer, []);\n    const [change, dispatch3] = useReducer(reducer, []);\n\n    const showCoords = () =>  {\n\n        let x = window.event.clientX\n        let y = window.event.clientY\n        const coord = { x , y}\n        dispatch1({ type: \"COORDS\", payload: coord})\n    }\n\n    window.onresize = () =>  {\n\n        let height = window.innerHeight\n        let width = window.innerWidth\n        const xAndY = { width, height}\n        dispatch2({ type: \"HEIGHTWIDTH\", payload: xAndY})\n    }\n\n    const changeSize = () => {\n      let clientWidth = 400;\n      let clientHeight = 500;\n      let change = { clientWidth, clientHeight }\n      dispatch3({ type: \"CHANGE\", payload: change})\n    }\n\n    return (\n    \n        <div onMouseMove={showCoords} style={{ display: 'flex',  alignItems: 'flex-start'}}>\n\n        <ul style={{ display: 'flex', flexDirection: 'column-reverse', alignItems: 'flex-start' }}>\n        {xAndYs.reverse().map(({  width , height }, i) => ( \n             <li key={i}> no {i} and  my { width } and Y { height } </li>\n        ))}\n        </ul>\n\n        <p> touch here</p> <button onClick={changeSize}> change size</button>\n\n        <ul style={{ display: 'flex',  flexDirection: 'column-reverse',  alignItems: 'flex-end'}}>\n        {coords.reverse().map(({ x, y }, i) => ( \n             <li key={i} > {i} the  X { x } and Y { y } </li>\n        ))}\n        </ul>\n\n        </div>\n    )\n  }\n\n\n\n"]},"metadata":{},"sourceType":"module"}