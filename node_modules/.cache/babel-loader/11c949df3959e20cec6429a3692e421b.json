{"ast":null,"code":"import _slicedToArray from \"/Users/tom/Desktop/random-component/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tom/Desktop/random-component/src/Components/GetCoordinates.jsx\";\nimport React from 'react';\nimport { useReducer } from 'react';\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"COORDS\":\n      return [...state, action.payload];\n\n    case \"DECREMENT\":\n      return [...state, action.payload];\n\n    default:\n      return state;\n  }\n};\n\nexport default function GetCoordinates() {\n  const _useReducer = useReducer(reducer, showCoords),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        coords = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  const showCoords = () => {\n    let x = window.event.clientX;\n    let y = window.event.clientY;\n    const coord = {\n      x,\n      y\n    };\n    dispatch({\n      type: \"COORDS\",\n      payload: coord\n    });\n  }; // const handleDecrement = () =>  {\n  //     let count = count - 1\n  //     dispatch({ type: \"DECREMENT\", payload: count})\n  // }\n\n\n  return React.createElement(\"div\", {\n    onMouseMove: showCoords,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, coords.map(({\n    x,\n    y\n  }, i) => React.createElement(\"h1\", {\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \" X \", x, \" and Y \", y, \" \")));\n} // import React from 'react';\n// import { useState } from 'react';\n// function reducer(state, action) {\n//     switch (action.type) {\n//       case \"UPDATE_XY\":\n//         return [...state, action.payload];\n//       default:\n//         return state;\n//     }\n//   }\n// export default function GetCoordinates() {\n//     const[width, setWidth] = useState(window.innerWidth);\n//     const[height, setHeight] = useState(window.innerHeight);\n//     const[x, setX] = useState(window.clientX);\n//     const[y, setY] = useState(window.clientY);\n//     window.onresize = () => {\n//         setHeight(window.innerHeight)\n//         setWidth(window.innerWidth)\n//     }\n//     const showCoords = () => {\n//         setX(window.event.clientX)\n//         setY(window.event.clientY)\n//     }\n//     return (\n//     <div onMouseMove={showCoords}>\n//     <h2> coordinates for X =   { x } coordinates for Y : { y } of mouse</h2>\n//     <h2> Total area of window in px {width * height}</h2>\n//     <h2> Width: {width} </h2>\n//     <h2> Height:  {height} </h2>\n//     </div>\n//     )\n// }","map":{"version":3,"sources":["/Users/tom/Desktop/random-component/src/Components/GetCoordinates.jsx"],"names":["React","useReducer","reducer","state","action","type","payload","GetCoordinates","showCoords","coords","dispatch","x","window","event","clientX","y","clientY","coord","map","i"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA0B,OAA1B;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/B,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,QAAL;AACE,aAAO,CAAC,GAAGF,KAAJ,EAAWC,MAAM,CAACE,OAAlB,CAAP;;AAEA,SAAK,WAAL;AACI,aAAO,CAAC,GAAGH,KAAJ,EAAWC,MAAM,CAACE,OAAlB,CAAP;;AACN;AACE,aAAOH,KAAP;AAPJ;AASD,CAVH;;AAYE,eAAe,SAASI,cAAT,GAA2B;AAAA,sBAEbN,UAAU,CAACC,OAAD,EAAUM,UAAV,CAFG;AAAA;AAAA,QAEjCC,MAFiC;AAAA,QAEzBC,QAFyB;;AAIxC,QAAMF,UAAU,GAAG,MAAO;AAEtB,QAAIG,CAAC,GAAGC,MAAM,CAACC,KAAP,CAAaC,OAArB;AACA,QAAIC,CAAC,GAAGH,MAAM,CAACC,KAAP,CAAaG,OAArB;AAEA,UAAMC,KAAK,GAAG;AAAEN,MAAAA,CAAF;AAAMI,MAAAA;AAAN,KAAd;AAEAL,IAAAA,QAAQ,CAAC;AAAEL,MAAAA,IAAI,EAAE,QAAR;AAAkBC,MAAAA,OAAO,EAAEW;AAA3B,KAAD,CAAR;AACH,GARD,CAJwC,CAcxC;AACA;AACA;AACA;;;AAEA,SACI;AAAK,IAAA,WAAW,EAAET,UAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCC,MAAM,CAACS,GAAP,CAAW,CAAC;AAAGP,IAAAA,CAAH;AAAMI,IAAAA;AAAN,GAAD,EAAYI,CAAZ,KACP;AAAI,IAAA,GAAG,EAAEA,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAkBR,CAAlB,aAA8BI,CAA9B,MADJ,CADD,CADJ;AAWD,C,CAGH;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["import React from 'react';\nimport { useReducer} from 'react';\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n      case \"COORDS\":\n        return [...state, action.payload];\n\n        case \"DECREMENT\":\n            return [...state, action.payload];\n      default:\n        return state;\n    }\n  }\n\n  export default function GetCoordinates () {\n\n    const [coords, dispatch] = useReducer(reducer, showCoords);\n\n    const showCoords = () =>  {\n\n        let x = window.event.clientX\n        let y = window.event.clientY\n\n        const coord = { x , y}\n        \n        dispatch({ type: \"COORDS\", payload: coord})\n    }\n\n    // const handleDecrement = () =>  {\n    //     let count = count - 1\n    //     dispatch({ type: \"DECREMENT\", payload: count})\n    // }\n\n    return (\n        <div onMouseMove={showCoords}>\n        {coords.map(({  x, y }, i) => ( \n             <h1 key={i} > X { x } and Y { y } </h1>\n        ))}\n         \n          {/* <button onClick={handleIncrement}>+1</button>\n          <button onClick={handleDecrement}>-1</button>\n          {count} */}\n        </div>\n    )\n  }\n\n\n// import React from 'react';\n// import { useState } from 'react';\n\n// function reducer(state, action) {\n//     switch (action.type) {\n//       case \"UPDATE_XY\":\n//         return [...state, action.payload];\n//       default:\n//         return state;\n//     }\n//   }\n\n// export default function GetCoordinates() {\n\n//     const[width, setWidth] = useState(window.innerWidth);\n//     const[height, setHeight] = useState(window.innerHeight);\n\n//     const[x, setX] = useState(window.clientX);\n//     const[y, setY] = useState(window.clientY);\n    \n//     window.onresize = () => {\n//         setHeight(window.innerHeight)\n//         setWidth(window.innerWidth)\n//     }\n \n//     const showCoords = () => {\n//         setX(window.event.clientX)\n//         setY(window.event.clientY)\n//     }\n\n//     return (\n//     <div onMouseMove={showCoords}>\n//     <h2> coordinates for X =   { x } coordinates for Y : { y } of mouse</h2>\n//     <h2> Total area of window in px {width * height}</h2>\n//     <h2> Width: {width} </h2>\n//     <h2> Height:  {height} </h2>\n\n//     </div>\n//     )\n// }"]},"metadata":{},"sourceType":"module"}